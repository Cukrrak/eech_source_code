// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct REGEN
{

	entity_sub_types
		sub_type;

	vec3d
		position;

	list_root
		member_root;

	list_link
		current_waypoint_link,
		regen_link,
		update_link;

	float
		sleep;

	unsigned int
		alive							:NUM_ALIVE_BITS,
		regen_creation_sub_type	:NUM_ENTITY_SUB_TYPE_BITS,
		side							:NUM_SIDE_BITS;
};

typedef struct REGEN regen;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum REGENERATION_BUILDING_TYPES
{

	REGENERATION_INVALID,
	REGENERATION_NONE,
	REGENERATION_FIXEDWING,
	REGENERATION_HELICOPTER,
	REGENERATION_ROUTED_VEHICLE,
	REGENERATION_PEOPLE,
	REGENERATION_SHIP_VEHICLE,
};

typedef enum REGENERATION_BUILDING_TYPES regeneration_building_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct REGEN_LIST_ELEMENT
{
	int
		type,
		sub_type,
		group;

};

typedef struct REGEN_LIST_ELEMENT regen_list_element;

struct REGEN_MANAGEMENT_ELEMENT
{
	int
		size,
		count,
		front;
};

typedef struct REGEN_MANAGEMENT_ELEMENT regen_management_element;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern int
	regen_to_landing_conversion [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define REGEN_QUEUE_DEFAULT_SIZE 5

#define REGEN_QUEUE_MINIMUM_SIZE REGEN_QUEUE_DEFAULT_SIZE

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern regen_list_element
	*regen_queue [NUM_ENTITY_SIDES][NUM_ENTITY_SUB_TYPE_REGENS];

extern regen_management_element
	regen_manager [NUM_ENTITY_SIDES][NUM_ENTITY_SUB_TYPE_REGENS];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define REGEN_UPDATE_SLOW		1.5

#define REGEN_UPDATE_MEDIUM	1.0

#define REGEN_UPDATE_FAST		0.5

extern float
	regen_frequency [NUM_ENTITY_SIDES];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "rg_creat.h"

#include "rg_dstry.h"

#include "rg_float.h"

#include "rg_funcs.h"

#include "rg_int.h"

#include "rg_list.h"

#include "rg_msgs.h"

#include "rg_pack.h"

#include "rg_updt.h"

#include "rg_vec3d.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void initialise_object_3d_regeneration_database ( void );

extern int get_3d_object_updateable_flag ( int object );

extern regeneration_building_types get_object_3d_regeneration_type ( object_3d_index_numbers object, int *landing_sub_type );

extern float get_regen_frequency_difficulty_modifier (void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
