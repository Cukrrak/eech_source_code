// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct WORLD_MAP_DATA
{
	int
		sector_side_length,			// must be 2^n value
		sector_side_length_mask,
		num_map_x_sectors,
		num_map_z_sectors,
		num_map_sectors,
		min_map_x_sector,
		min_map_z_sector,
		max_map_x_sector,
		max_map_z_sector;

	float
		min_map_x,
		min_map_y,
		min_map_z,
		mid_map_x,
		mid_map_y,
		mid_map_z,
		max_map_x,
		max_map_y,
		max_map_z;
};

typedef struct WORLD_MAP_DATA world_map_data;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern world_map_data
	world_map;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define SECTOR_SIDE_LENGTH			(world_map.sector_side_length)
#define SECTOR_SIDE_LENGTH_MASK	(world_map.sector_side_length_mask)

#define NUM_MAP_X_SECTORS			(world_map.num_map_x_sectors)
#define NUM_MAP_Z_SECTORS			(world_map.num_map_z_sectors)

#define NUM_MAP_SECTORS				(world_map.num_map_sectors)

#define MIN_MAP_X_SECTOR			(world_map.min_map_x_sector)
#define MIN_MAP_Z_SECTOR			(world_map.min_map_z_sector)

#define MAX_MAP_X_SECTOR			(world_map.max_map_x_sector)
#define MAX_MAP_Z_SECTOR			(world_map.max_map_z_sector)

#define MIN_MAP_X						(world_map.min_map_x)
#define MIN_MAP_Y						(world_map.min_map_y)
#define MIN_MAP_Z						(world_map.min_map_z)

#define MID_MAP_X						(world_map.mid_map_x)
#define MID_MAP_Y						(world_map.mid_map_y)
#define MID_MAP_Z						(world_map.mid_map_z)

#define MAX_MAP_X						(world_map.max_map_x)
#define MAX_MAP_Y						(world_map.max_map_y)
#define MAX_MAP_Z						(world_map.max_map_z)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MAP_PERIMETER_SIZE	(5.0 * KILOMETRE)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define get_x_sector(X_SEC,X) {convert_float_to_int ((X), &(X_SEC)); (X_SEC) /= SECTOR_SIDE_LENGTH;}

#define get_z_sector(Z_SEC,Z) {convert_float_to_int ((Z), &(Z_SEC)); (Z_SEC) /= SECTOR_SIDE_LENGTH;}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define point_inside_map_area(POS)	\
(												\
	((POS)->x >= MIN_MAP_X) &&			\
	((POS)->x <= MAX_MAP_X) &&			\
	((POS)->z >= MIN_MAP_Z) &&			\
	((POS)->z <= MAX_MAP_Z)				\
)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define point_inside_map_volume(POS)	\
(											 		\
	((POS)->x >= MIN_MAP_X) &&		  		\
	((POS)->x <= MAX_MAP_X) &&		  		\
	((POS)->y >= MIN_MAP_Y) &&		  		\
	((POS)->y <= MAX_MAP_Y) &&		  		\
	((POS)->z >= MIN_MAP_Z) &&		  		\
	((POS)->z <= MAX_MAP_Z)			  		\
)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define point_inside_adjusted_map_area(POS)						\
(											 										\
	((POS)->x >= (MIN_MAP_X + MAP_PERIMETER_SIZE)) &&		  		\
	((POS)->x <= (MAX_MAP_X - MAP_PERIMETER_SIZE)) &&		  		\
	((POS)->z >= (MIN_MAP_Z + MAP_PERIMETER_SIZE)) &&		  		\
	((POS)->z <= (MAX_MAP_Z - MAP_PERIMETER_SIZE))			  		\
)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define point_inside_adjusted_map_volume(POS)						\
(											 										\
	((POS)->x >= (MIN_MAP_X + MAP_PERIMETER_SIZE)) &&		  		\
	((POS)->x <= (MAX_MAP_X - MAP_PERIMETER_SIZE)) &&		  		\
	((POS)->y >= (MIN_MAP_Y)) &&									  		\
	((POS)->y <= (MAX_MAP_Y)) &&		 							 		\
	((POS)->z >= (MIN_MAP_Z + MAP_PERIMETER_SIZE)) &&		  		\
	((POS)->z <= (MAX_MAP_Z - MAP_PERIMETER_SIZE))			  		\
)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define point_above_ground(POS)																		\
(																												\
	((POS)->y >= get_terrain_3d_point_sector_max_elevation ((POS)->x, (POS)->z)) ||	\
	((POS)->y >= get_3d_terrain_elevation ((POS)->x, (POS)->z))								\
)

#define point_below_ground(POS)																		\
(																												\
	((POS)->y < get_terrain_3d_point_sector_max_elevation ((POS)->x, (POS)->z)) &&	\
	((POS)->y < get_3d_terrain_elevation ((POS)->x, (POS)->z))								\
)

#define point_above_floor(POS) ((POS)->y >= MIN_MAP_Y)

#define point_below_ceiling(POS) ((POS)->y <= MAX_MAP_Y)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define sector_inside_map_area(X_SEC,Z_SEC)	\
(															\
	((X_SEC) >= MIN_MAP_X_SECTOR) &&				\
	((X_SEC) <= MAX_MAP_X_SECTOR) &&				\
	((Z_SEC) >= MIN_MAP_Z_SECTOR) &&				\
	((Z_SEC) <= MAX_MAP_Z_SECTOR)					\
)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void set_entity_world_map_size (int num_map_x_sectors, int num_map_z_sectors, int sector_side_length);

extern int bound_position_to_map_area (vec3d *position);

extern int bound_position_to_adjusted_map_area (vec3d *position);

extern int bound_position_to_map_volume (vec3d *position);

extern int bound_position_to_adjusted_map_volume (vec3d *position);

extern int bound_double_position_to_adjusted_map_volume (double_vec3d *position);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define get_entity_world_map_sector_side_length() (world_map.sector_side_length)
#define get_entity_world_map_sector_side_length_mask() (world_map.sector_side_length_mask)

#define get_entity_world_map_num_map_x_sectors() (world_map.num_map_x_sectors)
#define get_entity_world_map_num_map_z_sectors() (world_map.num_map_z_sectors)

#define get_entity_world_map_num_map_sectors() (world_map.num_map_sectors)

#define get_entity_world_map_min_map_x_sector() (world_map.min_map_x_sector)
#define get_entity_world_map_min_map_z_sector() (world_map.min_map_z_sector)

#define get_entity_world_map_max_map_x_sector() (world_map.max_map_x_sector)
#define get_entity_world_map_max_map_z_sector() (world_map.max_map_z_sector)

#define get_entity_world_map_min_map_x() (world_map.min_map_x)
#define get_entity_world_map_min_map_y() (world_map.min_map_y)
#define get_entity_world_map_min_map_z() (world_map.min_map_z)

#define get_entity_world_map_mid_map_x() (world_map.mid_map_x)
#define get_entity_world_map_mid_map_y() (world_map.mid_map_y)
#define get_entity_world_map_mid_map_z() (world_map.mid_map_z)

#define get_entity_world_map_max_map_x() (world_map.max_map_x)
#define get_entity_world_map_max_map_y() (world_map.max_map_y)
#define get_entity_world_map_max_map_z() (world_map.max_map_z)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
