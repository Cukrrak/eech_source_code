// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum VEC3D_TYPES
{
	VEC3D_TYPE_BOUNDING_BOX_MAX,
	VEC3D_TYPE_BOUNDING_BOX_MIN,
	VEC3D_TYPE_COVER_POSITION,
	VEC3D_TYPE_GUIDE_POSITION,
	VEC3D_TYPE_INITIAL_VELOCITY,
	VEC3D_TYPE_MOTION_VECTOR,
	VEC3D_TYPE_OBJECT_SCALING,
	VEC3D_TYPE_POSITION,
	VEC3D_TYPE_RELATIVE_POSITION,
	VEC3D_TYPE_START_POSITION,
	VEC3D_TYPE_STOP_POSITION,
	VEC3D_TYPE_WAIT_POSITION,
	VEC3D_TYPE_WEAPON_TO_TARGET_VECTOR,
	VEC3D_TYPE_WEAPON_VECTOR,
	VEC3D_TYPE_WEATHER_POSITION,
	VEC3D_TYPE_WEATHER_VELOCITY,
	VEC3D_TYPE_WIND_DIRECTION_VECTOR,
	VEC3D_TYPE_WIND_EFFECT_POSITION,
	VEC3D_TYPE_WIND_EFFECT_VELOCITY,
	VEC3D_TYPE_XV,
	VEC3D_TYPE_YV,
	VEC3D_TYPE_ZV,
	NUM_VEC3D_TYPES
};

typedef enum VEC3D_TYPES vec3d_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define NUM_VEC3D_TYPE_PACK_BITS (5)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum VEC3D_PACK_TYPES
{
	VEC3D_PACK_TYPE_UNPACKED,
	VEC3D_PACK_TYPE_UNIT_VECTOR,
	VEC3D_PACK_TYPE_POSITION,
	VEC3D_PACK_TYPE_RELATIVE_POSITION,
	VEC3D_PACK_TYPE_INITIAL_VELOCITY,
	VEC3D_PACK_TYPE_MOTION_VECTOR,
	NUM_VEC3D_PACK_TYPES
};

typedef enum VEC3D_PACK_TYPES vec3d_pack_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct VEC3D_TYPE_DATA
{
	char
		*name;

	vec3d_pack_types
		pack_type;

	int
		debug_pack;
};

typedef struct VEC3D_TYPE_DATA vec3d_type_data;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern vec3d_type_data
	vec3d_type_database[NUM_VEC3D_TYPES];

#define get_vec3d_type_name(VEC3D_TYPE) (vec3d_type_database[(VEC3D_TYPE)].name)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern char
	*overload_invalid_vec3d_type_message,
	*debug_fatal_invalid_vec3d_type_message;

#ifdef DEBUG

#define validate_vec3d_type(VEC3D_TYPE) ((((VEC3D_TYPE) >= 0) && ((VEC3D_TYPE) < NUM_VEC3D_TYPES)) ? ((VEC3D_TYPE)) : (process_assert (overload_invalid_vec3d_type_message, __FILE__, __LINE__), 0))

#else

#define validate_vec3d_type(VEC3D_TYPE) ((VEC3D_TYPE))

#endif

#define debug_fatal_invalid_vec3d_type(EN,VEC3D_TYPE) (debug_fatal (debug_fatal_invalid_vec3d_type_message, get_local_entity_type_name ((EN)), get_local_entity_index ((EN)), get_vec3d_type_name ((VEC3D_TYPE)), __FILE__, __LINE__))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_set_local_entity_raw_vec3d[NUM_ENTITY_TYPES][NUM_VEC3D_TYPES]) (entity *en, vec3d_types type, vec3d *v);

#define set_local_entity_raw_vec3d(EN,VEC3D_TYPE,V) (fn_set_local_entity_raw_vec3d[get_local_entity_type ((EN))][validate_vec3d_type ((VEC3D_TYPE))] ((EN), (VEC3D_TYPE), (V)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_set_local_entity_vec3d[NUM_ENTITY_TYPES][NUM_VEC3D_TYPES]) (entity *en, vec3d_types type, vec3d *v);

#define set_local_entity_vec3d(EN,VEC3D_TYPE,V) (fn_set_local_entity_vec3d[get_local_entity_type ((EN))][validate_vec3d_type ((VEC3D_TYPE))] ((EN), (VEC3D_TYPE), (V)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_set_client_server_entity_vec3d[NUM_ENTITY_TYPES][NUM_VEC3D_TYPES][NUM_COMMS_MODEL_TYPES]) (entity *en, vec3d_types type, vec3d *v);

#define set_client_server_entity_vec3d(EN,VEC3D_TYPE,V) (fn_set_client_server_entity_vec3d[get_local_entity_type ((EN))][validate_vec3d_type ((VEC3D_TYPE))][get_comms_model ()] ((EN), (VEC3D_TYPE), (V)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_get_local_entity_vec3d[NUM_ENTITY_TYPES][NUM_VEC3D_TYPES]) (entity *en, vec3d_types type, vec3d *v);

#define get_local_entity_vec3d(EN,VEC3D_TYPE,V) (fn_get_local_entity_vec3d[get_local_entity_type ((EN))][validate_vec3d_type ((VEC3D_TYPE))] ((EN), (VEC3D_TYPE), (V)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern vec3d *(*fn_get_local_entity_vec3d_ptr[NUM_ENTITY_TYPES][NUM_VEC3D_TYPES]) (entity *en, vec3d_types type);

#define get_local_entity_vec3d_ptr(EN,VEC3D_TYPE) (fn_get_local_entity_vec3d_ptr[get_local_entity_type ((EN))][validate_vec3d_type ((VEC3D_TYPE))] ((EN), (VEC3D_TYPE)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void initialise_entity_vec3d_default_functions (void);

extern void pack_vec3d (entity *en, vec3d_types type, vec3d *v);

extern void unpack_vec3d (entity *en, vec3d_types type, vec3d *v);

extern void pack_vec3d_type (vec3d_types type);

extern vec3d_types unpack_vec3d_type (void);

extern float get_local_entity_vec3d_magnitude (entity *en, vec3d_types type);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
