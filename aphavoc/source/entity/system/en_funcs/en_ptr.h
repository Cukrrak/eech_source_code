// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum PTR_TYPES
{
	PTR_TYPE_EXTERNAL_VIEW_ENTITY,
	PTR_TYPE_GROUP_LEADER,
	PTR_TYPE_INSTANCE_3D_OBJECT,
	PTR_TYPE_POSITION_ENTITY,
	PTR_TYPE_PROTOTYPE_1,
	PTR_TYPE_PROTOTYPE_2,
	PTR_TYPE_PROTOTYPE_3,
	PTR_TYPE_PROTOTYPE_4,
	PTR_TYPE_RETURN_KEYSITE,
	PTR_TYPE_ROUTE_DEPENDENTS,
	PTR_TYPE_ROUTE_FORMATION_TYPES,
	PTR_TYPE_ROUTE_NODE,
	PTR_TYPE_ROUTE_WAYPOINT_TYPES,
	PTR_TYPE_SUCC,
	PTR_TYPE_SOUND_EFFECT_DATA,
	PTR_TYPE_TASK_LEADER,
	PTR_TYPE_TASK_OBJECTIVE,
	PTR_TYPE_TERRAIN_FACE_NORMAL,
	PTR_TYPE_TERRAIN_INFO,
	PTR_TYPE_WEAPON_PACKAGE_STATUS_ARRAY,
	NUM_PTR_TYPES
};

typedef enum PTR_TYPES ptr_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct PTR_TYPE_DATA
{
	char
		*name;
};

typedef struct PTR_TYPE_DATA ptr_type_data;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern ptr_type_data
	ptr_type_database[NUM_PTR_TYPES];

#define get_ptr_type_name(PTR_TYPE) (ptr_type_database[(PTR_TYPE)].name)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern char
	*overload_invalid_ptr_type_message,
	*debug_fatal_invalid_ptr_type_message;

#ifdef DEBUG

#define validate_ptr_type(PTR_TYPE) ((((PTR_TYPE) >= 0) && ((PTR_TYPE) < NUM_PTR_TYPES)) ? ((PTR_TYPE)) : (process_assert (overload_invalid_ptr_type_message, __FILE__, __LINE__), 0))

#else

#define validate_ptr_type(PTR_TYPE) ((PTR_TYPE))

#endif

#define debug_fatal_invalid_ptr_type(EN,PTR_TYPE) (debug_fatal (debug_fatal_invalid_ptr_type_message, get_local_entity_type_name ((EN)), get_local_entity_index ((EN)), get_ptr_type_name ((PTR_TYPE)), __FILE__, __LINE__))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_set_local_entity_ptr_value[NUM_ENTITY_TYPES][NUM_PTR_TYPES]) (entity *en, ptr_types type, void *ptr);

#define set_local_entity_ptr_value(EN,PTR_TYPE,VALUE) (fn_set_local_entity_ptr_value[get_local_entity_type ((EN))][validate_ptr_type ((PTR_TYPE))] ((EN), (PTR_TYPE), (VALUE)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void *(*fn_get_local_entity_ptr_value[NUM_ENTITY_TYPES][NUM_PTR_TYPES]) (entity *en, ptr_types type);

#define get_local_entity_ptr_value(EN,PTR_TYPE) (fn_get_local_entity_ptr_value[get_local_entity_type ((EN))][validate_ptr_type ((PTR_TYPE))] ((EN), (PTR_TYPE)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void initialise_entity_ptr_value_default_functions (void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
