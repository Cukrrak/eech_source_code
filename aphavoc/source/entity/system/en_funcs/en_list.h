// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct LIST_ROOT
{
	entity
		*first_child;
};

typedef struct LIST_ROOT list_root;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct LIST_LINK
{
	entity
		*parent,
		*child_succ,
		*child_pred;
};

typedef struct LIST_LINK list_link;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum LIST_TYPES
{
	LIST_TYPE_INVALID,
	LIST_TYPE_AIRCREW,
	LIST_TYPE_AIR_REGISTRY,
	LIST_TYPE_ASSIGNED_TASK,
	LIST_TYPE_BUILDING_GROUP,
	LIST_TYPE_CAMPAIGN_OBJECTIVE,
	LIST_TYPE_CARGO,
	LIST_TYPE_CITY_BUILDING,
	LIST_TYPE_COMPLETED_TASK,
	LIST_TYPE_CURRENT_WAYPOINT,
	LIST_TYPE_DIVISION,
	LIST_TYPE_DIVISION_HEADQUARTERS,
	LIST_TYPE_FOLLOWER,
	LIST_TYPE_FORCE,
	LIST_TYPE_GROUND_REGISTRY,
	LIST_TYPE_GUIDE,
	LIST_TYPE_GUIDE_STACK,
	LIST_TYPE_GUNSHIP_TARGET,
	LIST_TYPE_HIERARCHY,
	LIST_TYPE_INDEPENDENT_GROUP,
	LIST_TYPE_KEYSITE_FORCE,
	LIST_TYPE_KEYSITE_GROUP,
	LIST_TYPE_LANDING_SITE,
	LIST_TYPE_LAUNCHED_WEAPON,
	LIST_TYPE_MEMBER,
	LIST_TYPE_MOVEMENT_DEPENDENT,
	LIST_TYPE_PADLOCK,
	LIST_TYPE_PILOT,
	LIST_TYPE_PILOT_LOCK,
	LIST_TYPE_PLAYER_TASK,
	LIST_TYPE_REGEN,
	LIST_TYPE_SEA_REGISTRY,
	LIST_TYPE_SECTOR,
	LIST_TYPE_SECTOR_TASK,
	LIST_TYPE_SEGMENT,
	LIST_TYPE_SPECIAL_EFFECT,
	LIST_TYPE_TAKEOFF_QUEUE,
	LIST_TYPE_TARGET,
	LIST_TYPE_TASK_DEPENDENT,
	LIST_TYPE_UNASSIGNED_TASK,
	LIST_TYPE_UPDATE,
	LIST_TYPE_VIEW,
	LIST_TYPE_VIEW_WEAPON,
	LIST_TYPE_WAYPOINT,
	NUM_LIST_TYPES
};

typedef enum LIST_TYPES list_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define NUM_LIST_TYPE_PACK_BITS (6)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct LIST_TYPE_DATA
{
	char
		*name;

	int
		debug_pack;
};

typedef struct LIST_TYPE_DATA list_type_data;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern list_type_data
	list_type_database[NUM_LIST_TYPES];

#define get_list_type_name(LIST_TYPE) (list_type_database[(LIST_TYPE)].name)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern char
	*overload_invalid_list_type_message,
	*debug_fatal_invalid_list_type_message;

#ifdef DEBUG

#define validate_list_type(LIST_TYPE) ((((LIST_TYPE) >= 0) && ((LIST_TYPE) < NUM_LIST_TYPES)) ? ((LIST_TYPE)) : (process_assert (overload_invalid_list_type_message, __FILE__, __LINE__), 0))

#else

#define validate_list_type(LIST_TYPE) ((LIST_TYPE))

#endif

#define debug_fatal_invalid_list_type(EN,LIST_TYPE) (debug_fatal (debug_fatal_invalid_list_type_message, get_local_entity_type_name ((EN)), get_local_entity_index ((EN)), get_list_type_name ((LIST_TYPE)), __FILE__, __LINE__))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_set_local_entity_first_child[NUM_ENTITY_TYPES][NUM_LIST_TYPES]) (entity *en, list_types type, entity *first_child);

#define set_local_entity_first_child(EN,LIST_TYPE,FIRST_CHILD) (fn_set_local_entity_first_child[get_local_entity_type ((EN))][validate_list_type((LIST_TYPE))] ((EN), (LIST_TYPE), (FIRST_CHILD)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern entity *(*fn_get_local_entity_first_child[NUM_ENTITY_TYPES][NUM_LIST_TYPES]) (entity *en, list_types type);

#define get_local_entity_first_child(EN,LIST_TYPE) (fn_get_local_entity_first_child[get_local_entity_type ((EN))][validate_list_type((LIST_TYPE))] ((EN), (LIST_TYPE)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_set_local_entity_parent[NUM_ENTITY_TYPES][NUM_LIST_TYPES]) (entity *en, list_types type, entity *parent);

#define set_local_entity_parent(EN,LIST_TYPE,PARENT) (fn_set_local_entity_parent[get_local_entity_type ((EN))][validate_list_type((LIST_TYPE))] ((EN), (LIST_TYPE), (PARENT)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern entity *(*fn_get_local_entity_parent[NUM_ENTITY_TYPES][NUM_LIST_TYPES]) (entity *en, list_types type);

#define get_local_entity_parent(EN,LIST_TYPE) (fn_get_local_entity_parent[get_local_entity_type ((EN))][validate_list_type((LIST_TYPE))] ((EN), (LIST_TYPE)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_set_local_entity_child_succ[NUM_ENTITY_TYPES][NUM_LIST_TYPES]) (entity *en, list_types type, entity *child_succ);

#define set_local_entity_child_succ(EN,LIST_TYPE,CHILD_SUCC) (fn_set_local_entity_child_succ[get_local_entity_type ((EN))][validate_list_type((LIST_TYPE))] ((EN), (LIST_TYPE), (CHILD_SUCC)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern entity *(*fn_get_local_entity_child_succ[NUM_ENTITY_TYPES][NUM_LIST_TYPES]) (entity *en, list_types type);

#define get_local_entity_child_succ(EN,LIST_TYPE) (fn_get_local_entity_child_succ[get_local_entity_type ((EN))][validate_list_type((LIST_TYPE))] ((EN), (LIST_TYPE)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void (*fn_set_local_entity_child_pred[NUM_ENTITY_TYPES][NUM_LIST_TYPES]) (entity *en, list_types type, entity *child_pred);

#define set_local_entity_child_pred(EN,LIST_TYPE,CHILD_PRED) (fn_set_local_entity_child_pred[get_local_entity_type ((EN))][validate_list_type((LIST_TYPE))] ((EN), (LIST_TYPE), (CHILD_PRED)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern entity *(*fn_get_local_entity_child_pred[NUM_ENTITY_TYPES][NUM_LIST_TYPES]) (entity *en, list_types type);

#define get_local_entity_child_pred(EN,LIST_TYPE) (fn_get_local_entity_child_pred[get_local_entity_type ((EN))][validate_list_type((LIST_TYPE))] ((EN), (LIST_TYPE)))

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void initialise_entity_list_default_functions (void);

extern void insert_local_entity_into_parents_child_list (entity *en, list_types type, entity *parent, entity *pred);

extern void delete_local_entity_from_parents_child_list (entity *en, list_types type);

extern void unlink_local_entity_children (entity *en, list_types list);

extern entity *get_local_entity_child_succ_circular (entity *en, list_types type);

extern entity *get_local_entity_child_pred_circular (entity *en, list_types type);

extern void pack_list_root (entity *en, list_types type, list_root *root);

extern void unpack_list_root (entity *en, list_types type, list_root *root);

extern void pack_list_link (entity *en, list_types type, list_link *link);

extern void unpack_list_link (entity *en, list_types type, list_link *link);

extern void pack_list_type (list_types type);

extern list_types unpack_list_type (void);

extern void set_client_server_entity_parent (entity *en, list_types type, entity *parent);

extern int get_local_entity_list_size (entity *parent, list_types type);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
