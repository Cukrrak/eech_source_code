// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum ENTITY_FORCE_ACTION_TYPES
{

	ENTITY_FORCE_ACTION_INVALID,
	ENTITY_FORCE_ACTION_RETREAT,
	ENTITY_FORCE_ACTION_NOTHING,
	ENTITY_FORCE_ACTION_RECON,
	ENTITY_FORCE_ACTION_INTERCEPT,
	ENTITY_FORCE_ACTION_DEEP_STRIKE,
	NUM_ENTITY_FORCE_ACTIONS
};

typedef enum ENTITY_FORCE_ACTION_TYPES entity_force_action_types;

extern char
	*entity_force_action_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum ENTITY_FORCE_ATTITUDE_TYPES
{
	ENTITY_FORCE_ATTITUDE_COWARD,
	ENTITY_FORCE_ATTITUDE_PASSIVE,
	ENTITY_FORCE_ATTITUDE_CAUTIOUS,
	ENTITY_FORCE_ATTITUDE_NORMAL,
	ENTITY_FORCE_ATTITUDE_FEISTY,
	ENTITY_FORCE_ATTITUDE_AGGRESSIVE,
	ENTITY_FORCE_ATTITUDE_DESTRUCTIVE,
	ENTITY_FORCE_ATTITUDE_ERRATIC,
	NUM_ENTITY_FORCE_ATTITUDES
};

typedef enum ENTITY_FORCE_ATTITUDE_TYPES entity_force_attitude_types;

extern char
	*entity_force_attitude_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum ENTITY_FORCES
{
	ENTITY_FORCE_UNKNOWN,
	ENTITY_FORCE_AIR,
	ENTITY_FORCE_GROUND,
	ENTITY_FORCE_SEA,
	NUM_ENTITY_FORCES
};

typedef enum ENTITY_FORCES entity_forces;

extern char
	*entity_force_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum CAMPAIGN_RESULT_TYPES
{

	CAMPAIGN_RESULT_NONE,
	CAMPAIGN_RESULT_FAIL,
	CAMPAIGN_RESULT_SUCCESS,
	CAMPAIGN_RESULT_STALEMATE,
	CAMPAIGN_RESULT_OUTOFHARDWARE,
	CAMPAIGN_RESULT_SERVER_REJECTED,
	NUM_CAMPAIGN_RESULT_TYPES
};

typedef enum CAMPAIGN_RESULT_TYPES campaign_result_types;

extern char
	*campaign_result_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct CAMPAIGN_CRITERIA_TYPE
{

	short int
		criteria_type,
		valid,
		result;

	int
		rank_points,
		experience_points,
		*rank_variable,
		*experience_variable;

	union
	{

		struct
		{

			short int
				goal,
				count,
				type;
		};

		struct
		{

			short int
				days,
				hours,
				minutes,
				seconds;
		};

		struct
		{

			short int
				value1,
				value2,
				value3,
				value4;
		};
	};

	struct CAMPAIGN_CRITERIA_TYPE
		*next;
};

typedef struct CAMPAIGN_CRITERIA_TYPE campaign_criteria_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum CAMPAIGN_TRIGGER
{

	CAMPAIGN_TRIGGER_NONE,
	CAMPAIGN_TRIGGER_BALANCE_OF_POWER,
	CAMPAIGN_TRIGGER_TASK_COMPLETED,
	CAMPAIGN_TRIGGER_TASK_FAILED,
	CAMPAIGN_TRIGGER_OBJECT_DESTROYED,
	CAMPAIGN_TRIGGER_OBJECT_FIRED,
	CAMPAIGN_TRIGGER_OBJECT_TARGETED,
	CAMPAIGN_TRIGGER_OBJECT_LANDED,
	CAMPAIGN_TRIGGER_INEFFICIENT_KEYSITE,
	CAMPAIGN_TRIGGER_WAYPOINT_REACHED,
	CAMPAIGN_TRIGGER_SECTOR_WON,
	CAMPAIGN_TRIGGER_SECTOR_LOST,
	CAMPAIGN_TRIGGER_SECTOR_REACHED,
	CAMPAIGN_TRIGGER_TIME_DURATION,
	CAMPAIGN_TRIGGER_VARIABLE_CONDITION,
	CAMPAIGN_TRIGGER_RANDOM,
	CAMPAIGN_TRIGGER_USER_LANDED,
	CAMPAIGN_TRIGGER_KEY_PRESS,
	
	NUM_CAMPAIGN_TRIGGER_TYPES
};

typedef enum CAMPAIGN_TRIGGER campaign_trigger;

extern char
	*campaign_trigger_names [];

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TASK_GENERATION_TYPE
{

	unsigned short int
		valid						: 1;

	int
		created,
		completed,
		failed;
};

typedef struct TASK_GENERATION_TYPE task_generation_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum FORCE_INFO_CATAGORIES
{

	FORCE_INFO_CATAGORY_ARMED_FIXED_WING,
	FORCE_INFO_CATAGORY_UNARMED_FIXED_WING,
	FORCE_INFO_CATAGORY_ARMED_HELICOPTER,
	FORCE_INFO_CATAGORY_UNARMED_HELICOPTER,
	FORCE_INFO_CATAGORY_ARMED_ROUTED_VEHICLE,
	FORCE_INFO_CATAGORY_UNARMED_ROUTED_VEHICLE,
	FORCE_INFO_CATAGORY_ARMED_SHIP_VEHICLE,
	FORCE_INFO_CATAGORY_UNARMED_SHIP_VEHICLE,
	NUM_FORCE_INFO_CATAGORIES
};

typedef enum FORCE_INFO_CATAGORIES force_info_catagories;

extern char
	*force_info_catagory_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define ENTITY_FORCE_MIN	(ENTITY_FORCE_UNKNOWN + 1)
#define ENTITY_FORCE_MAX	(NUM_ENTITY_FORCES - 1)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct CAMPAIGN_TRIGGER_TYPE
{

	short int
		type,
		trigger_type;

	union
	{

		struct
		{

			short int
				days,
				hours,
				minutes,
				seconds;
		};

		struct
		{

			short int
				value1,
				value2,
				value3,
				value4;
		};
	};

	char
		*event_name;

	struct CAMPAIGN_TRIGGER_TYPE
		*next;
};

typedef struct CAMPAIGN_TRIGGER_TYPE campaign_trigger_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct CAMPAIGN_EVENT_TYPE
{

	char
		*name,
		*filename;

	int
		triggered,
		file_offset;

	struct CAMPAIGN_EVENT_TYPE
		*next;
};

typedef struct CAMPAIGN_EVENT_TYPE campaign_event_type;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct CAMPAIGN_WHILE_LOOP_TYPE
{

	char
		*filename;

	int
		file_offset;

	struct CAMPAIGN_WHILE_LOOP_TYPE
		*next;
};

typedef struct CAMPAIGN_WHILE_LOOP_TYPE campaign_while_loop_type;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
