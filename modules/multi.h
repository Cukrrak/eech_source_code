// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef _MULTI_INCLUDED_

#define _MULTI_INCLUDED_

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "system.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void direct_play_get_message_queue (void);

#ifdef NO_INTERNAL_MODULES

typedef unsigned int DPID, *LPDPID;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MAXPLAYERS      16

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum DIRECT_PLAY_COMMS_MODE_TYPES
{
	DIRECT_PLAY_COMMS_MODE_NONE,
	DIRECT_PLAY_COMMS_MODE_MULTI,
};

typedef enum DIRECT_PLAY_COMMS_MODE_TYPES direct_play_comms_mode_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern direct_play_comms_mode_types
        direct_play_comms_mode;

#define direct_play_set_comms_mode(MODE) (direct_play_comms_mode = (MODE))

#define direct_play_get_comms_mode() (direct_play_comms_mode)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum DIRECT_PLAY_MESSAGE_MODES
{
	DIRECT_PLAY_CLOSE_SESSION,
	DIRECT_PLAY_CREATE_INTERFACE,
	DIRECT_PLAY_DESTROY_INTERFACE,
	DIRECT_PLAY_CREATE_SESSION,
	DIRECT_PLAY_JOIN_SESSION,
	DIRECT_PLAY_CREATE_GROUP,
	DIRECT_PLAY_JOIN_GROUP,
	DIRECT_PLAY_LEAVE_GROUP,
	DIRECT_PLAY_DESTROY_GROUP,
	DIRECT_PLAY_CREATE_PLAYER,
	DIRECT_PLAY_DESTROY_PLAYER,
};

typedef enum DIRECT_PLAY_MESSAGE_MODES direct_play_message_modes;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct DIRECT_PLAY_MESSAGE_TYPE
{

	enum DIRECT_PLAY_MESSAGE_MODES
		type;

	int
		return_value;
};

typedef struct DIRECT_PLAY_MESSAGE_TYPE direct_play_message_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SERVICE_PROVIDER_TABLE_TYPE
{

	LPGUID
		guid;

	void
		*connection;

	int
		connection_size;

	char
		*name;

	struct SERVICE_PROVIDER_TABLE_TYPE
		*next;
};

typedef struct SERVICE_PROVIDER_TABLE_TYPE service_provider_table_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SESSION_TABLE_TYPE;

typedef struct SESSION_TABLE_TYPE session_table_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct GROUP_TABLE_TYPE
{

	DPID
		group;

	char
		*group_name;

	struct GROUP_TABLE_TYPE
		*next_group;
};

typedef struct GROUP_TABLE_TYPE group_table_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct CONNECTION_DATA_TYPE;

typedef struct CONNECTION_DATA_TYPE connection_data_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct MODEM_NAMES
{

	char
		*name;

	struct MODEM_NAMES
		*succ;
};

typedef struct MODEM_NAMES modem_names;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern modem_names
	*modem_name_list;

extern int
	direct_play_use_guaranteed_packets;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void create_direct_play_interface ( void );

extern int direct_play_initialise_system (void);
extern void direct_play_deinitialise_system (void);
extern int direct_play_close_session (void);
extern int direct_play_create_interface (service_provider_table_type *this_service);
extern int direct_play_destroy_interface (void);
extern int direct_play_enumerate_service_providers ();
extern int direct_play_interface_capabilities (void);
extern int direct_play_get_lobbied ( void );
extern void direct_play_register_application ( char *app_name, char *filename );

extern int direct_play_enumerate_sessions (void);
extern int direct_play_create_session (int value);
extern int direct_play_join_session (void);
extern int direct_play_session_capabilities (void);
extern int direct_play_session_players (void);

extern int direct_play_enumerate_groups (void);
extern int direct_play_create_group (void);
extern int direct_play_destroy_group (void);
extern int direct_play_join_group (void);
extern int direct_play_leave_group (void);
extern int direct_play_remove_player_from_group (int id);	//DPID id);
extern int direct_play_destroy_group (void);

extern int direct_play_create_player (void);
extern int direct_play_create_server_player (void);
extern int direct_play_destroy_player (void);

extern int direct_play_send_data (DPID to_id, void *data, int size);
extern int direct_play_receive_data (void *data, int size);

extern struct SERVICE_PROVIDER_TABLE_TYPE *direct_play_get_service_provider_table (void);
extern struct SESSION_TABLE_TYPE *direct_play_get_session_table (void);
extern struct GROUP_TABLE_TYPE *direct_play_get_group_table (void);
extern void direct_play_set_group_name (char *name);
extern void direct_play_set_session_name (char *name);
extern void direct_play_set_player_name (char *name);
extern char *direct_play_get_session_name (void);
extern char *direct_play_get_session_name (void);
extern char *direct_play_get_group_name (void);
extern char *direct_play_get_player_name (DPID player_id);
extern void direct_play_set_group_id (int id);
extern int direct_play_get_group_id (void);
extern void direct_play_set_player_id (int id);
extern int direct_play_get_player_id (void);
extern int direct_play_get_number_of_players (void);

extern void direct_play_set_service_provider (LPGUID this_service);
extern void direct_play_set_group (DPID this_group);

extern service_provider_table_type *direct_play_get_service_provider (void);
extern session_table_type *direct_play_get_session (void);
extern connection_data_type *direct_play_get_connection_data (void);

extern int direct_play_get_connection_baudrate ( void );

extern int direct_play_refresh_modem_session ( void );

extern void direct_play_set_session_type_and_name ( int value );

extern void direct_play_destroy_modem ( void );

extern int direct_play_dial_modem ( char *modem, char *phone_number );

extern int direct_play_answer_modem ( char *modem, int user_data );

extern void set_direct_play_inet_address ( char *address );
extern void set_direct_play_serial_address ( int com_port, int baud_rate, int stop_bits, int parity, int flow );

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// debug funtions
extern void print_connection_data (void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#else /* NO_INTERNAL_MODULES */

#include <dplay.h>

#include <dplobby.h>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MAXPLAYERS      16

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum DIRECT_PLAY_COMMS_MODE_TYPES
{
	DIRECT_PLAY_COMMS_MODE_NONE,
	DIRECT_PLAY_COMMS_MODE_MULTI,
};

typedef enum DIRECT_PLAY_COMMS_MODE_TYPES direct_play_comms_mode_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern direct_play_comms_mode_types
        direct_play_comms_mode;

#define direct_play_set_comms_mode(MODE) (direct_play_comms_mode = (MODE))

#define direct_play_get_comms_mode() (direct_play_comms_mode)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum DIRECT_PLAY_MESSAGE_MODES
{
	DIRECT_PLAY_CLOSE_SESSION,
	DIRECT_PLAY_CREATE_INTERFACE,
	DIRECT_PLAY_DESTROY_INTERFACE,
	DIRECT_PLAY_CREATE_SESSION,
	DIRECT_PLAY_JOIN_SESSION,
	DIRECT_PLAY_CREATE_GROUP,
	DIRECT_PLAY_JOIN_GROUP,
	DIRECT_PLAY_LEAVE_GROUP,
	DIRECT_PLAY_DESTROY_GROUP,
	DIRECT_PLAY_CREATE_PLAYER,
	DIRECT_PLAY_DESTROY_PLAYER,
};

typedef enum DIRECT_PLAY_MESSAGE_MODES direct_play_message_modes;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct DIRECT_PLAY_MESSAGE_TYPE
{

	enum DIRECT_PLAY_MESSAGE_MODES
		type;

	int
		return_value;
};

typedef struct DIRECT_PLAY_MESSAGE_TYPE direct_play_message_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SERVICE_PROVIDER_TABLE_TYPE
{

	LPGUID
		guid;

	LPVOID
		connection;

	int
		connection_size;

	char
		*name;

	struct SERVICE_PROVIDER_TABLE_TYPE
		*next;
};

typedef struct SERVICE_PROVIDER_TABLE_TYPE service_provider_table_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SESSION_TABLE_TYPE
{

	int
		lobby_session;

	LPDPSESSIONDESC2
		session;

	struct SESSION_TABLE_TYPE
		*next_session;
};

typedef struct SESSION_TABLE_TYPE session_table_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct GROUP_TABLE_TYPE
{

	DPID
		group;

	char
		*group_name;

	struct GROUP_TABLE_TYPE
		*next_group;
};

typedef struct GROUP_TABLE_TYPE group_table_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct CONNECTION_DATA_TYPE
{

	char
		*group_name,
		*session_name,
		*player_name;

	DPID
		group_id,
		player_id;

	service_provider_table_type
		service_provider;

	session_table_type
		this_session;

	group_table_type
		*this_group;

	int
		one_way_hosting_setup;

	unsigned int
		is_initialised:1,
		is_hosting:1;
};

typedef struct CONNECTION_DATA_TYPE connection_data_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct MODEM_NAMES
{

	char
		*name;

	struct MODEM_NAMES
		*succ;
};

typedef struct MODEM_NAMES modem_names;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern modem_names
	*modem_name_list;

extern int
	direct_play_use_guaranteed_packets;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void create_direct_play_interface ( void );

extern int direct_play_initialise_system (void);
extern void direct_play_deinitialise_system (void);
extern int direct_play_close_session (void);
extern int direct_play_create_interface (service_provider_table_type *this_service);
extern int direct_play_destroy_interface (void);
extern int direct_play_enumerate_service_providers ();
extern int direct_play_interface_capabilities (void);
extern DPCAPS *direct_play_get_interface_capabilities (void);
extern int direct_play_get_lobbied ( void );
extern void direct_play_register_application ( char *app_name, char *filename );

extern int direct_play_enumerate_sessions (void);
extern int direct_play_create_session (int value);
extern int direct_play_join_session (void);
extern int direct_play_session_capabilities (void);
extern int direct_play_session_players (void);
extern LPDPSESSIONDESC2 direct_play_get_session_capabilities (void);

extern int direct_play_enumerate_groups (void);
extern int direct_play_create_group (void);
extern int direct_play_destroy_group (void);
extern int direct_play_join_group (void);
extern int direct_play_leave_group (void);
extern int direct_play_destroy_group (void);

extern int direct_play_create_player (void);
extern int direct_play_create_server_player (void);
extern int direct_play_destroy_player (void);

extern int direct_play_send_data (DPID to_id, void *data, int size);
extern int direct_play_receive_data (void *data, int size);

extern struct SERVICE_PROVIDER_TABLE_TYPE *direct_play_get_service_provider_table (void);
extern struct SESSION_TABLE_TYPE *direct_play_get_session_table (void);
extern struct GROUP_TABLE_TYPE *direct_play_get_group_table (void);
extern void direct_play_set_group_name (char *name);
extern void direct_play_set_session_name (char *name);
extern void direct_play_set_player_name (char *name);
extern char *direct_play_get_session_name (void);
extern char *direct_play_get_session_name (void);
extern char *direct_play_get_group_name (void);
extern char *direct_play_get_player_name (DPID player_id);
extern void direct_play_set_group_id (int id);
extern int direct_play_get_group_id (void);
extern void direct_play_set_player_id (int id);
extern int direct_play_get_player_id (void);
extern int direct_play_get_number_of_players (void);

extern void direct_play_set_service_provider (LPGUID this_service);
extern void direct_play_set_interface (LPDIRECTPLAY2A this_interface);
extern void direct_play_set_session (LPDPSESSIONDESC2 this_session);
extern void direct_play_set_group (DPID this_group);

extern service_provider_table_type *direct_play_get_service_provider (void);
extern LPDIRECTPLAY2A direct_play_get_interface (void);
extern session_table_type *direct_play_get_session (void);
extern connection_data_type *direct_play_get_connection_data (void);

extern int direct_play_remove_player_from_group (DPID id);
extern int direct_play_get_connection_baudrate ( void );

extern int direct_play_refresh_modem_session ( void );

extern void direct_play_set_session_type_and_name ( int value );

extern void direct_play_destroy_modem ( void );

extern int direct_play_dial_modem ( char *modem, char *phone_number );
extern HRESULT direct_play_dial_modem_status ( void );

extern int direct_play_answer_modem ( char *modem, int user_data );
extern HRESULT direct_play_answer_modem_status ( void );

extern void set_direct_play_inet_address ( char *address );
extern void set_direct_play_serial_address ( int com_port, int baud_rate, int stop_bits, int parity, int flow );

extern int direct_play_get_send_queue_number_of_packets (void);
extern int direct_play_get_send_queue_number_of_bytes (void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// debug funtions
extern void direct_play_error (HRESULT hr);
extern void direct_play_enumerate_session_error (HRESULT hr);
extern void direct_play_session_error (HRESULT hr);
extern void direct_play_create_player_error (HRESULT hr);
extern void direct_play_system_error (LPDPMSG_GENERIC type);
extern void direct_play_receive_error (HRESULT hr);
extern void direct_play_group_error (int type);
extern void direct_play_join_group_error (int type);
extern void print_connection_data (void);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif /* NO_INTERNAL_MODULES */

#endif

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
