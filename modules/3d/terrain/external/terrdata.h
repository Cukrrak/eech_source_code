// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//
// Terrain data is stored in free-form polygons for now.
//

//
// The terrain grid is broken down into sectors.
//

#define TERRAIN_3D_SECTOR_SIDE_LENGTH 2048
#define TERRAIN_3D_SECTOR_SIDE_LENGTH_ADJUSTMENT 2048

//#define TERRAIN_3D_SECTOR_X_MAX 128

//#define TERRAIN_3D_SECTOR_Z_MAX 128

#define TERRAIN_3D_MIN_MAP_X	(0.0)
#define TERRAIN_3D_MIN_MAP_Z	(0.0)
#define TERRAIN_3D_MAX_MAP_X	((float) (TERRAIN_3D_SECTOR_X_MAX * TERRAIN_3D_SECTOR_SIDE_LENGTH) - 0.001)
#define TERRAIN_3D_MAX_MAP_Z	((float) (TERRAIN_3D_SECTOR_Z_MAX * TERRAIN_3D_SECTOR_SIDE_LENGTH) - 0.001)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//
// Terrain geometry data scaling factors
//

#define TERRAIN_3D_XZ_SCALE ( ( ( float ) ( TERRAIN_3D_SECTOR_SIDE_LENGTH + TERRAIN_3D_SECTOR_SIDE_LENGTH_ADJUSTMENT ) ) / 65536.0 )

#define TERRAIN_3D_Y_SCALE ( 1.0 / 32767.0 )

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_POINT_XZ
{

	short int
		x,
		z;
};

typedef struct TERRAIN_3D_POINT_XZ terrain_3d_point_xz;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma pack(1)

struct TERRAIN_3D_POINT_Y
{

	union
	{

		struct
		{

			unsigned short int
				y:15,
				normal_change:1;
		};

		unsigned short int
			whole_value;

		short int
			whole_signed_value;
	};
};

typedef struct TERRAIN_3D_POINT_Y terrain_3d_point_y;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_COLOUR
{

	unsigned char
		red,
		green,
		blue;
};

typedef struct TERRAIN_3D_COLOUR terrain_3d_colour;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_COLOUR_INDEX
{

	unsigned char
		index;
};

typedef struct TERRAIN_3D_COLOUR_INDEX terrain_3d_colour_index;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_NORMAL_INDEX
{

	unsigned char
		index;
};

typedef struct TERRAIN_3D_NORMAL_INDEX terrain_3d_normal_index;

#pragma pack(4)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_POINT_WORD_REFERENCE
{

	unsigned short int
		point;
};

typedef struct TERRAIN_3D_POINT_WORD_REFERENCE terrain_3d_point_word_reference;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_POINT_BYTE_REFERENCE
{

	unsigned char
		point;
};

typedef struct TERRAIN_3D_POINT_BYTE_REFERENCE terrain_3d_point_byte_reference;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_FACE
{

	unsigned char
		number_of_points:7,
		surface_change:1;
};

typedef struct TERRAIN_3D_FACE terrain_3d_face;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_SURFACE
{

	unsigned char
		surface_id;
};

typedef struct TERRAIN_3D_SURFACE terrain_3d_surface;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_OBJECT
{

	struct TERRAIN_3D_OBJECT
		*next_object;

	object_3d_instance
		*object;
};

typedef struct TERRAIN_3D_OBJECT terrain_3d_object;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_SECTOR
{

	unsigned short int
		number_of_points,
		number_of_polygons,
		radius;

	short int
		minimum_height,
		maximum_height,
		average_height;

	struct TERRAIN_3D_POINT_XZ
		*points_xz;

	struct TERRAIN_3D_POINT_Y
		*points_y;

	struct TERRAIN_3D_FACE
		*polygons;

	union
	{

		struct TERRAIN_3D_POINT_WORD_REFERENCE
			*point_word_references;

		struct TERRAIN_3D_POINT_BYTE_REFERENCE
			*point_byte_references;
	};


	struct TERRAIN_3D_SURFACE
		*surface_changes;

	struct TERRAIN_3D_NORMAL_INDEX
		*normal_changes;

	struct TERRAIN_3D_COLOUR
		*point_colours;

	struct TERRAIN_3D_COLOUR_INDEX
		*colour_indices;

	//
	// Pointer to a sector approximation
	//

//	struct TERRAIN_3D_SECTOR
//		*approximation;

	//
	// If the sector has any terrain objects, they're on this list
	//

	struct TERRAIN_3D_OBJECT
		*objects;
};

typedef struct TERRAIN_3D_SECTOR terrain_3d_sector;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////
//
// Data required by get_3d_terrain_elevation_and_face_normal function in order to check the previous face first.
//
// If terrain_sector == NULL then the data block is uninitialised.
//
// It is important that this pointer is set to NULL before first use.
//
////////////////////////////////////////

struct TERRAIN_3D_POINT_DATA
{

	int
		x_sector,
		z_sector;

	terrain_3d_sector
		*terrain_sector;

	float
		last_elevation;

	terrain_3d_face
		*terrain_face;

	union
	{

		terrain_3d_point_word_reference
			*terrain_elevation_point_word_references;

		terrain_3d_point_byte_reference
			*terrain_elevation_point_byte_references;
	};

	int
		terrain_triangle_offset;

	terrain_types
		terrain_type;

	vec3d
		face_normal;
};

typedef struct TERRAIN_3D_POINT_DATA terrain_3d_point_data;

typedef struct TERRAIN_3D_POINT_DATA terrain_3d_find_fast;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_FILE_VALIDATION
{

	union
	{

		struct
		{

			unsigned int
				map_number		: 4,
				colour_scheme	: 10,
				creation_day	: 10,
				creation_year	: 8;
		};

		unsigned int
			whole_value;
	};
};

typedef struct TERRAIN_3D_FILE_VALIDATION terrain_3d_file_validation;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_TREE_SECTOR
{

	int
		number_of_trees;

	struct TERRAIN_3D_TREE_DATA
		*trees;
};

typedef struct TERRAIN_3D_TREE_SECTOR terrain_3d_tree_sector;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define TERRAIN_3D_MAX_TREE_HEIGHT	(35)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_TREE_DATA
{

	signed short int
		x,
		z;

	unsigned short int
		y;

	unsigned char
		colour;

	unsigned char
		height:7,
		type:1;
};

typedef struct TERRAIN_3D_TREE_DATA terrain_3d_tree_data;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct TERRAIN_3D_TRIANGLE
{

	vec3d
		point1,
		point2,
		point3,
		normal;
};

typedef struct TERRAIN_3D_TRIANGLE terrain_3d_triangle;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//
// There is a static array of sectors - there is no point in them being memory mapped files.
//   as the data needs to be patched to allow pointers, however the data the sectors point to
//   should be a memory mapped file.
//

extern terrain_3d_sector
	**terrain_sectors;	//[TERRAIN_3D_SECTOR_Z_MAX][TERRAIN_3D_SECTOR_X_MAX];

extern terrain_3d_tree_sector
	**terrain_tree_sectors;

extern int
	terrain_3d_sector_x_max,
	terrain_3d_sector_z_max;

extern float
	terrain_3d_min_map_x,
	terrain_3d_min_map_z,
	terrain_3d_max_map_x,
	terrain_3d_max_map_z;

//
// A conversion table for int -> float for the gouraud colour polygons in the terrain.
//

extern float
	terrain_colour_conversion_table[256];

extern float
	terrain_3d_alpha_start,
	terrain_3d_alpha_end,
	terrain_3d_alpha_distance,
	terrain_3d_alpha_constant,
	terrain_3d_alpha_factor;

extern float
	terrain_3d_map_minimum_height,
	terrain_3d_map_maximum_height,
	terrain_3d_map_scaled_height_difference;

extern struct OBJECT_3D_INSTANCE
	*terrain_3d_tree_object;

extern int
	terrain_3d_tree_rendering_enabled;

extern int
	terrain_types_in_sector[TERRAIN_TYPE_LAST];

extern terrain_3d_file_validation
	current_terrain_version;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern void initialise_3d_terrain ( void );

extern void set_3d_terrain_detail_blend_parameters ( float fog_factor );

extern void set_3d_terrain_detail_blend_factors ( void );

extern int load_3d_terrain ( char *path );

extern void unload_3d_terrain ( void );

extern void save_3d_object_as_terrain_sector ( int object );

extern void save_terrain_sector_as_lw_3d_object ( int x, int z, char *filename );

extern void get_terrain_3d_sector ( float x, float z, int *sectorx, int *sectorz );

extern int position_on_3d_terrain ( float x, float z );

extern void animate_river_textures ( void );

extern float get_terrain_3d_point_sector_min_elevation ( float x, float z );

extern float get_terrain_3d_point_sector_max_elevation ( float x, float z );

extern float get_terrain_3d_point_sector_average_elevation ( float x, float z );

extern int get_terrain_3d_tree_sector_data ( int x, int z, terrain_3d_tree_data **ptr );

extern float get_terrain_3d_tree_scale ( terrain_3d_tree_data *tree );

extern int get_terrain_3d_types_in_sector ( float x, float z );

extern int get_terrain_3d_number_of_type_triangles_in_sector ( float x, float z, terrain_types type );

extern void get_terrain_3d_type_triangles_in_sector ( float x, float z, terrain_types type, terrain_3d_triangle *triangles );

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
