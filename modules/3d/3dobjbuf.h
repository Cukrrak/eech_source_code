// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MAX_3D_OBJECTS 4096

#define SHADOW_DISTANCE_BIAS 2048

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//
// Different types of object rendering methods.
//

enum OBJECT_3D_DRAWING_TYPES
{

	OBJECT_3D_DRAW_TYPE_INVALID,
	OBJECT_3D_DRAW_TYPE_OBJECT,
	OBJECT_3D_DRAW_TYPE_ZBUFFERED_OBJECT,
	OBJECT_3D_DRAW_TYPE_OBJECT_COLOURED,
	OBJECT_3D_DRAW_TYPE_OBJECT_SHADOW,
	OBJECT_3D_DRAW_TYPE_TRANSLUCENT_POLYGON_BUFFER,
	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_OBJECT,
	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_CLIPPED_SECTOR,
	OBJECT_3D_DRAW_TYPE_TERRAIN_2D_CLIPPED_SECTOR,
	OBJECT_3D_DRAW_TYPE_TERRAIN_UNCLIPPED_SECTOR,
	OBJECT_3D_DRAW_TYPE_TERRAIN_TRANSPARENT_3D_CLIPPED_SECTOR,
	OBJECT_3D_DRAW_TYPE_TERRAIN_TRANSPARENT_2D_CLIPPED_SECTOR,
	OBJECT_3D_DRAW_TYPE_TERRAIN_TRANSPARENT_UNCLIPPED_SECTOR,
	OBJECT_3D_DRAW_TYPE_TERRAIN_3D_TREE_OBJECT,
	OBJECT_3D_DRAW_TYPE_CLOUD_SECTOR,
	OBJECT_3D_DRAW_TYPE_SPRITE,
	OBJECT_3D_DRAW_TYPE_SMOKE_TRAIL,
	OBJECT_3D_DRAW_TYPE_POLYLINE,
	OBJECT_3D_DRAW_TYPE_EXPLOSION,
	OBJECT_3D_DRAW_TYPE_OBJECT_SCENE,
	OBJECT_3D_DRAW_TYPE_TRANSLUCENT_OBJECT,
	OBJECT_3D_DRAW_TYPE_ZBUFFERED_TRANSLUCENT_OBJECT,
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct OBJECT_3D_TERRAIN_SECTOR
{

	int
		x,
		z;

	float
		range;
};

typedef struct OBJECT_3D_TERRAIN_SECTOR object_3d_terrain_sector;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct OBJECT_3D_TERRAIN_TREE
{

	float
		x,
		y,
		z,
		scale,
		dissolve;

	real_colour
		colour;
};

typedef struct OBJECT_3D_TERRAIN_TREE object_3d_terrain_tree;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct OBJECT_3D_CLOUD_SECTOR
{

	int
		x,
		z;
};

typedef struct OBJECT_3D_CLOUD_SECTOR object_3d_cloud_sector;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct OBJECT_3D_SPRITE
{

	vec3d
		position;

	union
	{
	
		struct
		{
		
			unsigned char
				blue,
				green,
				red,
				alpha;
		};
	
		unsigned int
			colour;
	};

	float
		radius;

	float
		roll;

	int
		additive;

	struct SCREEN
		*texture;
};

typedef struct OBJECT_3D_SPRITE object_3d_sprite;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct OBJECT_3D_SMOKE_TRAIL
{

	struct SMOKE_TRAIL_INFORMATION
		*trail;

	int
		segment;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct OBJECT_3D_POLYLINE
{

	struct POLYLINE_HEADER
		*polyline;

	int
		segment;
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct OBJECT_3D_EXPLOSION
{

	vec3d
		position,
		relative_position;

	float
		scale,
		animation;

	object_3d_index_numbers
		object_index;
};

typedef struct OBJECT_3D_EXPLOSION object_3d_explosion;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct OBJECT_3D_SCENE
{

	vec3d
		position,
		relative_position;

	float
		heading;

	object_3d_index_numbers
		object_index;
};

typedef struct OBJECT_3D_SCENE object_3d_scene;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SCENE_SLOT_DRAWING_LIST
{

	struct SCENE_SLOT_DRAWING_LIST
		*pred,
		*succ;

	enum OBJECT_3D_DRAWING_TYPES
		type;

	int
		z;

	union
	{

		struct
		{
	
			struct OBJECT_3D_INSTANCE
				*object;

			struct REAL_COLOUR
				colour;
		};

		struct OBJECT_3D_TERRAIN_SECTOR
			sector;

		struct OBJECT_3D_TERRAIN_TREE
			terrain_tree;

		struct OBJECT_3D_CLOUD_SECTOR
			cloud_sector;

		struct OBJECT_3D_SPRITE
			sprite;

		struct OBJECT_3D_SMOKE_TRAIL
			smoke_trail;

		struct OBJECT_3D_POLYLINE
			polyline;

		struct OBJECT_3D_EXPLOSION
			explosion;

		struct OBJECT_3D_SCENE
			scene;

		struct POLYGON_BUFFER
			*translucent_buffer;

		struct TRANSLUCENT_OBJECT_SURFACE
			*translucent_surfaces;
	};
};

typedef	struct SCENE_SLOT_DRAWING_LIST scene_slot_drawing_list;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define insert_object_into_3d_scene(TYPE,DATA) insert_zbiased_object_into_3d_scene (TYPE, DATA, 0)

#define insert_relative_object_into_3d_scene(TYPE,POS,DATA) insert_zbiased_relative_object_into_3d_scene (TYPE, POS, DATA, 0)

extern void set_middle_scene_slot_height ( float height );

extern scene_slot_drawing_list * get_3d_scene_slot ( void );

extern void insert_object_shadow_into_3d_scene ( object_3d_instance *object );

extern void insert_high_zbuffered_scene_slot_into_3d_scene ( struct SCENE_SLOT_DRAWING_LIST *object );

extern void insert_high_nonzbuffered_scene_slot_into_3d_scene ( struct SCENE_SLOT_DRAWING_LIST *object );

extern void insert_middle_scene_slot_into_3d_scene ( struct SCENE_SLOT_DRAWING_LIST *object );

extern void insert_low_zbuffered_scene_slot_into_3d_scene ( struct SCENE_SLOT_DRAWING_LIST *object );

extern void insert_low_nonzbuffered_scene_slot_into_3d_scene ( struct SCENE_SLOT_DRAWING_LIST *object );

extern void insert_zbiased_relative_object_into_3d_scene ( enum OBJECT_3D_DRAWING_TYPES type, vec3d *relative_position, void *data, float distance_bias );

extern void insert_zbiased_object_into_3d_scene ( enum OBJECT_3D_DRAWING_TYPES type, void *object, float distance_bias );

extern void insert_zbiased_coloured_object_into_3d_scene ( enum OBJECT_3D_DRAWING_TYPES type, void *data, struct REAL_COLOUR colour, float distance_bias );

extern void insert_near_object_into_3d_scene ( enum OBJECT_3D_DRAWING_TYPES type, void *data );

extern void insert_transparent_buffer_into_3d_scene ( struct SCENE_SLOT_DRAWING_LIST *object );

extern void draw_3d_scene ( void );

extern void clear_3d_scene_objects ( void );

extern void set_3d_exclusive_instance ( object_3d_instance *instance );

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern scene_slot_drawing_list
	*object_3d_near_list,
	*object_3d_sorted_list;

extern float
	middle_scene_slot_height;

extern int
	number_of_objects_in_3d_scene,
	final_number_of_objects_in_3d_scene,
	number_of_sprites_in_3d_scene,
	final_number_of_sprites_in_3d_scene;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
