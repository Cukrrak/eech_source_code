// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum LINE_LINE_INTERCEPT_RESULT_TYPES
{

	LINE_LINE_INTERCEPT_PARALLEL,
	LINE_LINE_INTERCEPT_CONVERGE,
	LINE_LINE_INTERCEPT_DIVERGE,
	NUM_LINE_LINE_INTERCEPT_TYPES
};

typedef enum LINE_LINE_INTERCEPT_RESULT_TYPES line_line_intercept_result_types;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct VEC2D
{

	float
		x,
		y;
};

typedef struct VEC2D vec2d;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct VEC3D
{

	float
		x,
		y,
		z;
};

typedef struct VEC3D vec3d;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct DOUBLE_VEC3D
{

	double
		x,
		y,
		z;
};

typedef struct DOUBLE_VEC3D double_vec3d;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct VEC4D
{

	float
		x,
		y,
		z,
		a;
};

typedef struct VEC4D vec4d;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SHORT_INT_VEC2D
{

	short int
		x,
		y;
};

typedef struct SHORT_INT_VEC2D short_int_vec2d;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SHORT_INT_VEC3D
{

	short int
		x,
		y,
		z;
};

typedef struct SHORT_INT_VEC3D short_int_vec3d;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct SHORT_INT_VEC4D
{

	short int
		x,
		y,
		z,
		a;
};

typedef struct SHORT_INT_VEC4D short_int_vec4d;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct INT_VEC3D
{

	int
		x,
		y,
		z;
};

typedef struct INT_VEC3D int_vec3d;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FLOAT LIBRARY
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern float normalise_4d_vector ( vec4d *vector );

extern float accurately_normalise_3d_vector ( vec3d *vector );

extern float normalise_3d_vector ( vec3d *vector );

extern float normalise_2d_vector ( vec2d *vector );

extern float normalise_any_3d_vector ( vec3d *vector );

extern float normalise_any_2d_vector ( vec2d *vector );

extern float get_3d_vector_magnitude ( vec3d *vector );

extern float get_2d_vector_magnitude ( vec2d *vector );

extern float get_3d_vector_inverse_magnitude ( vec3d *vector );

extern void normalise_3d_vector_given_magnitude ( vec3d *vector, float length );

extern void normalise_2d_vector_given_magnitude ( vec2d *vector, float length );

extern float get_3d_perp_dist_of_point_from_line (vec3d *point_a, vec3d *point_b, vec3d *point_c, vec3d *point_d);

extern void get_3d_perp_vector_of_point_from_line (vec3d *line_point_a, vec3d *line_point_b, vec3d *point_c, vec3d *result);

extern float get_2d_perp_dist_of_point_from_line (vec3d *line_point_a, vec3d *line_point_b, vec3d *point_c, float *distance_along_line);

extern float get_2d_perp_dist_of_point_from_infinite_line (vec3d *line_point_a, vec3d *line_point_b, vec3d *point_c);

extern line_line_intercept_result_types line_line_3d_intercept (vec3d *p1, vec3d *p2, vec3d *q1, vec3d *q2, vec3d *intercept_point_p, vec3d *intercept_point_q);

extern int line_line_2d_intercept (vec2d *p1, vec2d *p2, vec2d *q1, vec2d *q2, vec2d *intercept_point);

extern float get_2d_vector_dot_product( vec2d *a, vec2d *b );

extern float get_3d_vector_dot_product( vec3d *a, vec3d *b );

extern float get_2d_unit_vector_dot_product (vec2d *a, vec2d *b);

extern float get_3d_unit_vector_dot_product (vec3d *a, vec3d *b);

extern void get_3d_vector_cross_product (vec3d *result, vec3d *v1, vec3d *v2);

extern void get_3d_unit_vector_from_heading_and_pitch (vec3d *result, float heading, float pitch);

extern void get_heading_and_pitch_from_3d_unit_vector (vec3d *v, float *heading, float *pitch);

extern int get_3d_vector_cube_cube_intersect (vec3d *v1a, vec3d *v1b, vec3d *v2a, vec3d *v2b);

extern int get_3d_line_triangle_intersection (vec3d *p1, vec3d *p2, vec3d *pa, vec3d *pb, vec3d *pc, vec3d *pi, vec3d *ni);

extern int get_3d_line_quad_intersection (vec3d *p1, vec3d *p2, vec3d *pa, vec3d *pb, vec3d *pc, vec3d *pd, vec3d *pi, vec3d *ni);

extern void invert_3d_vector (vec3d *vector);

extern void rotate_2d_vector (vec2d *vector, float theta);

extern void rotate_3d_vector (vec3d *vector, float theta);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define check_zero_2d_vector(VECTOR) (get_2d_vector_magnitude (VECTOR) == 0.0)

#define check_zero_3d_vector(VECTOR) (get_3d_vector_magnitude (VECTOR) == 0.0)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DOUBLE LIBRARY
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern double normalise_3d_double_vector ( double_vec3d *vector );

extern double normalise_any_3d_double_vector ( double_vec3d *vector );

extern double get_3d_double_vector_magnitude ( double_vec3d *vector );

extern double get_3d_double_vector_dot_product( double_vec3d *a, double_vec3d *b );

extern double get_3d_unit_double_vector_dot_product (double_vec3d *a, double_vec3d *b);

extern void get_3d_double_vector_cross_product (double_vec3d *result, double_vec3d *v1, double_vec3d *v2);

extern void invert_3d_double_vector (double_vec3d *vector);

extern void rotate_2d_double_vector (double_vec3d *vector, float theta);

extern void get_3d_unit_double_vector_from_heading_and_pitch (double_vec3d *result, double heading, double pitch);

extern void copy_vec3d_to_double_vec3d (vec3d *vec1, double_vec3d *vec2);

extern void copy_double_vec3d_to_vec3d (double_vec3d *vec1, vec3d *vec2);

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define check_zero_3d_double_vector(VECTOR) (get_3d_double_vector_magnitude (VECTOR) == 0.0)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
