// 
// 	 Enemy Engaged RAH-66 Comanche Versus KA-52 Hokum
// 	 Copyright (C) 2000 Empire Interactive (Europe) Ltd,
// 	 677 High Road, North Finchley, London N12 0DA
// 
// 	 Please see the document LICENSE.TXT for the full licence agreement
// 
// 2. LICENCE
//  2.1 	
//  	Subject to the provisions of this Agreement we now grant to you the 
//  	following rights in respect of the Source Code:
//   2.1.1 
//   	the non-exclusive right to Exploit  the Source Code and Executable 
//   	Code on any medium; and 
//   2.1.2 
//   	the non-exclusive right to create and distribute Derivative Works.
//  2.2 	
//  	Subject to the provisions of this Agreement we now grant you the
// 	following rights in respect of the Object Code:
//   2.2.1 
// 	the non-exclusive right to Exploit the Object Code on the same
// 	terms and conditions set out in clause 3, provided that any
// 	distribution is done so on the terms of this Agreement and is
// 	accompanied by the Source Code and Executable Code (as
// 	applicable).
// 
// 3. GENERAL OBLIGATIONS
//  3.1 
//  	In consideration of the licence granted in clause 2.1 you now agree:
//   3.1.1 
// 	that when you distribute the Source Code or Executable Code or
// 	any Derivative Works to Recipients you will also include the
// 	terms of this Agreement;
//   3.1.2 
// 	that when you make the Source Code, Executable Code or any
// 	Derivative Works ("Materials") available to download, you will
// 	ensure that Recipients must accept the terms of this Agreement
// 	before being allowed to download such Materials;
//   3.1.3 
// 	that by Exploiting the Source Code or Executable Code you may
// 	not impose any further restrictions on a Recipient's subsequent
// 	Exploitation of the Source Code or Executable Code other than
// 	those contained in the terms and conditions of this Agreement;
//   3.1.4 
// 	not (and not to allow any third party) to profit or make any
// 	charge for the Source Code, or Executable Code, any
// 	Exploitation of the Source Code or Executable Code, or for any
// 	Derivative Works;
//   3.1.5 
// 	not to place any restrictions on the operability of the Source 
// 	Code;
//   3.1.6 
// 	to attach prominent notices to any Derivative Works stating
// 	that you have changed the Source Code or Executable Code and to
// 	include the details anddate of such change; and
//   3.1.7 
//   	not to Exploit the Source Code or Executable Code otherwise than
// 	as expressly permitted by  this Agreement.
// 



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define EVENT_DEBUG           0

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define MAX_NUMBER_JOYSTICK_BUTTONS		32

#define MAX_NUMBER_REGISTERED_EVENTS   (NUM_DEVICE_EVENTS + MAX_NUMBER_JOYSTICK_BUTTONS)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//
// Mouse events start at 256, ie after all of the DIK events.
//

enum DEVICE_EVENTS
{

	MOUSE_LEFT_BUTTON 		= 256,
	MOUSE_RIGHT_BUTTON,
	MOUSE_MOVE,
	MOUSE_MOVE_UP,
	MOUSE_MOVE_DOWN,
	MOUSE_MOVE_LEFT,
	MOUSE_MOVE_RIGHT,
	JOYSTICK_MOVE,
	JOYSTICK_BUTTON,
	NUM_DEVICE_EVENTS
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum BUTTON_STATES
{

	BUTTON_STATE_INVALID,
	BUTTON_STATE_UP,
	BUTTON_STATE_DOWN,
	BUTTON_STATE_EITHER,
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum KEY_STATES
{

	KEY_STATE_INVALID,
	KEY_STATE_UP,
	KEY_STATE_DOWN,
	KEY_STATE_EITHER,
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum EVENT_TYPES
{

   EVENT_TYPE_INVALID,
   EVENT_TYPE_KEY,
   EVENT_TYPE_MOUSE_BUTTON,
   EVENT_TYPE_MOUSE_MOVE,
   EVENT_TYPE_JOYSTICK_BUTTON,
   EVENT_TYPE_JOYSTICK_MOVE,
   EVENT_TYPE_TIMER,
};

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

enum MODIFIER_TYPES
{

   MODIFIER_NONE,
   MODIFIER_LEFT_SHIFT,
   MODIFIER_LEFT_CONTROL,
   MODIFIER_LEFT_ALT,
   MODIFIER_RIGHT_SHIFT,
   MODIFIER_RIGHT_CONTROL,
   MODIFIER_RIGHT_ALT,
	MODIFIER_MOUSE_LEFT_BUTTON,
	MODIFIER_MOUSE_RIGHT_BUTTON,
   NUM_MODIFIER_TYPES
};

extern char
	*button_state_names [],
	*modifier_type_names [];

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct EVENT
{

   enum EVENT_TYPES
      type;

	unsigned char
		modifier,
		device_index,
		key;

	unsigned short int
		state,
		button;

	short int
		dx,
		dy,
		dz;
};

typedef struct EVENT event;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

struct REGISTERED_EVENT_TYPE
{

	unsigned char
      in_use,
      current_state,
      notify_state;

   void
      ((*function) (void *arg));
};

typedef struct REGISTERED_EVENT_TYPE registered_event_type;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern registered_event_type
   registered_events [MAX_NUMBER_REGISTERED_EVENTS][NUM_MODIFIER_TYPES];

extern int
   current_modifier_states;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern int
	last_key_event_time,
	last_joystick_event_time,
	last_mouse_event_time;

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define get_last_key_event_time() (last_key_event_time)

#define get_last_joystick_event_time() (last_joystick_event_time)

#define get_last_mouse_event_time() (last_mouse_event_time)

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

extern int initialise_event_system ( void );

extern void clear_events (void);

extern void reset_event_key (int dik_code);

extern void reset_events (void);

extern void create_joystick_event ( int device_index, int button, enum BUTTON_STATES state );

extern void create_key_event ( int key, int state );

extern void create_mouse_button_event ( enum DEVICE_EVENTS button, enum BUTTON_STATES state );

extern void create_mouse_move_event ( int dx, int dy, int dz );

extern int get_event ( event *ev );

extern void set_event (int event, int modifier, int notify_state, void (*func) (struct EVENT *ev) );

extern void process_events ( void );

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

